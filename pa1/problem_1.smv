MODULE main 
	VAR 
		s : 0..1;
		proc0 : process user_process(s, proc1.y, 0);
 		proc1 : process user_process(s, proc0.y, 1);
ASSIGN
 	init(s) := 1;

 SPEC !EF(proc0.status=critical & proc1.status=critical)
--SPEC EF (proc0.status=critical & proc1.status=critical)
 SPEC  AG ((proc0.status=wait  -> AF proc0.status=critical) & (proc1.status=wait  -> AF proc1.status=critical)) 


MODULE user_process(s, y_o, i)

VAR
	y : boolean;
	y_other : boolean;
	status : {noncritical, wait, critical};

ASSIGN
	init(y) := FALSE;
	init(y_other) := y_o;
	init(status) := noncritical ;
	
	next(s):=case
		TRUE: i;
	esac;

	next(status) := case 
			y_other = FALSE | s != i : critical ; 
			y_other = TRUE | s = i : wait ;
			TRUE: wait ;
		esac;

	next(y):=case
		y_other = FALSE | s != i : TRUE ;
		TRUE: FALSE ;
	esac;	

FAIRNESS
	running;
